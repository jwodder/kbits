<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Knowledge Bits - Programming</title><link>https://jwodder.github.io/kbits/</link><description>References I wish I'd already found</description><lastBuildDate>Thu, 29 May 2025 00:00:00 -0400</lastBuildDate><item><title>Getting the Current Cursor Position from a Terminal</title><link>https://jwodder.github.io/kbits/posts/cursor-pos/</link><description>&lt;p class="first last"&gt;When using &lt;a class="reference external" href="ansi"&gt;ANSI escape sequences&lt;/a&gt; to manipulate a compatible
terminal, you may need to know where the text cursor is currently located
on the screen, especially if its current location was set by the user or a
previous program rather than your code.  Fortunately, the ANSI escape
sequence standard &lt;a class="reference external" href="https://ecma-international.org/publications-and-standards/standards/ecma-48/"&gt;ECMA-48&lt;/a&gt; provides a sequence for doing just that.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John T. Wodder II</dc:creator><pubDate>Thu, 29 May 2025 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:jwodder.github.io,2025-05-29:/kbits/posts/cursor-pos/</guid><category>Programming</category><category>terminals</category><category>ANSI escape codes</category></item><item><title>Implementing Boolean Negation Flags with Clap</title><link>https://jwodder.github.io/kbits/posts/clap-bool-negate/</link><description>&lt;p class="first last"&gt;How to use Rust’s &lt;a class="reference external" href="https://github.com/clap-rs/clap"&gt;clap&lt;/a&gt; library to implement boolean &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--foo&lt;/span&gt;&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--no-foo&lt;/span&gt;&lt;/tt&gt; flags that undo each other&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John T. Wodder II</dc:creator><pubDate>Sun, 23 Oct 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:jwodder.github.io,2022-10-23:/kbits/posts/clap-bool-negate/</guid><category>Programming</category><category>Rust</category><category>clap</category><category>command-line parsing</category></item><item><title>Python Asynchronous Programming Fundamentals</title><link>https://jwodder.github.io/kbits/posts/pyasync-fundam/</link><description>&lt;p class="first last"&gt;Python introduced asynchronous programming capabilities in version 3.4 in
2014, with further notable improvements in almost every minor version
since.  However, to many Python programmers, this area of the language
remains esoteric, misunderstood, and underutilized.  This article aims to
elucidate the fundamental concepts of asynchronous programming as part of
the first step towards mastery.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John T. Wodder II</dc:creator><pubDate>Sun, 29 May 2022 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:jwodder.github.io,2022-05-29:/kbits/posts/pyasync-fundam/</guid><category>Programming</category><category>Python</category><category>async</category></item><item><title>Creating Multi-Value Enums in Python</title><link>https://jwodder.github.io/kbits/posts/multi-value-enum/</link><description>&lt;p class="first last"&gt;How to create an enum in Python where each member has a “main” value and a
set of “extra” constant attributes&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John T. Wodder II</dc:creator><pubDate>Fri, 14 Jan 2022 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:jwodder.github.io,2022-01-14:/kbits/posts/multi-value-enum/</guid><category>Programming</category><category>Python</category><category>enum</category><category>mypy</category></item><item><title>Skipping Pytest Tests Unless an Option is Given</title><link>https://jwodder.github.io/kbits/posts/pytest-mark-off/</link><description>&lt;p class="first last"&gt;When testing Python code with &lt;a class="reference external" href="https://docs.pytest.org"&gt;pytest&lt;/a&gt;, you may occasionally write tests
that you only want to run under special circumstances, such as long-running
tests that should only be run under continuous integration and not when
invoking &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; locally.  The naïve way to accomplish this is to
decorate the tests in question with a pytest mark like
&lt;tt class="docutils literal"&gt;&amp;#64;pytest.mark.slow&lt;/tt&gt; and then specify &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-m&lt;/span&gt; &amp;quot;not slow&amp;quot;&lt;/tt&gt; when running
pytest locally, but then you have to remember to pass this option every
time, and if you hardcode it into your &lt;tt class="docutils literal"&gt;tox.ini&lt;/tt&gt; or pytest configuration,
you’ll need something else to remove it when testing under CI.
Fortunately, there are better ways to make pytest skip tests by default.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John T. Wodder II</dc:creator><pubDate>Sun, 05 Dec 2021 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:jwodder.github.io,2021-12-05:/kbits/posts/pytest-mark-off/</guid><category>Programming</category><category>Python</category><category>pytest</category><category>testing</category></item><item><title>Notable Features Introduced in Each Python Version</title><link>https://jwodder.github.io/kbits/posts/pyversion-features/</link><description>&lt;p class="first last"&gt;Notable features introduced in each major release of Python, from Python
3.0 forwards&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John T. Wodder II</dc:creator><pubDate>Sun, 11 Jul 2021 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:jwodder.github.io,2021-07-11:/kbits/posts/pyversion-features/</guid><category>Programming</category><category>Python</category><category>history</category></item><item><title>Integrating auto with bump2version</title><link>https://jwodder.github.io/kbits/posts/auto-bump2version/</link><description>&lt;p class="first last"&gt;&lt;a class="reference external" href="https://github.com/intuit/auto"&gt;&lt;tt class="docutils literal"&gt;auto&lt;/tt&gt;&lt;/a&gt; by Intuit lets you set up automatic creation of tags &amp;amp; releases and
population of changelogs in a GitHub project.  It takes care of determining
the version number for new releases, but, by default, it does not set the
new version number in your code.  This isn’t a problem if your project uses
something like &lt;a class="reference external" href="https://github.com/pypa/setuptools_scm"&gt;&lt;tt class="docutils literal"&gt;setuptools_scm&lt;/tt&gt;&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/python-versioneer/python-versioneer"&gt;&lt;tt class="docutils literal"&gt;versioneer&lt;/tt&gt;&lt;/a&gt; to fetch the version
number from Git, but if your project’s version number is hardcoded in your
code, you’ll need another solution.  &lt;a class="reference external" href="https://github.com/c4urself/bump2version"&gt;&lt;tt class="docutils literal"&gt;bump2version&lt;/tt&gt;&lt;/a&gt; is that solution, and
it can be integrated into &lt;tt class="docutils literal"&gt;auto&lt;/tt&gt; as shown here.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John T. Wodder II</dc:creator><pubDate>Thu, 11 Feb 2021 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:jwodder.github.io,2021-02-11:/kbits/posts/auto-bump2version/</guid><category>Programming</category><category>GitHub Actions</category><category>auto</category><category>bump2version</category><category>continuous integration</category></item><item><title>Using Package Data in Python Projects with Setuptools</title><link>https://jwodder.github.io/kbits/posts/pypkg-data/</link><description>&lt;p class="first last"&gt;When creating a Python project, you may want to include a number of
non-Python files in the project that the code can then access at runtime,
such as templates, images, and data.  These files are called &lt;em&gt;package
data&lt;/em&gt;, and this article describes how to include them in &amp;amp; access them from
your project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John T. Wodder II</dc:creator><pubDate>Tue, 29 Dec 2020 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:jwodder.github.io,2020-12-29:/kbits/posts/pypkg-data/</guid><category>Programming</category><category>Python</category><category>Python packaging</category><category>setuptools</category></item><item><title>Running Extra Steps after Releasing with auto in GitHub Actions</title><link>https://jwodder.github.io/kbits/posts/auto-post-release/</link><description>&lt;p class="first last"&gt;Let’s say you’ve set up &lt;a class="reference external" href="https://github.com/intuit/auto"&gt;&lt;tt class="docutils literal"&gt;auto&lt;/tt&gt;&lt;/a&gt; for your project via a GitHub Actions
workflow, and now you want that workflow to carry out additional steps —
such as building &amp;amp; uploading assets — whenever &lt;tt class="docutils literal"&gt;auto&lt;/tt&gt; creates a new
release.  Let’s also say that none of the available plugins for &lt;tt class="docutils literal"&gt;auto&lt;/tt&gt;
covers your use-case and you’re not a JavaScript programmer, so you won’t
be writing a new plugin to do what you want.  How do you adjust your GitHub
Actions workflow to run these extra steps at the right time?  Read to find
out.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John T. Wodder II</dc:creator><pubDate>Mon, 26 Oct 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:jwodder.github.io,2020-10-26:/kbits/posts/auto-post-release/</guid><category>Programming</category><category>GitHub Actions</category><category>auto</category><category>continuous integration</category></item><item><title>Common Python Packaging Mistakes</title><link>https://jwodder.github.io/kbits/posts/pypkg-mistakes/</link><description>&lt;p class="first last"&gt;An overview of common mistakes made in creating &amp;amp; building a Python package
and how to avoid them&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John T. Wodder II</dc:creator><pubDate>Sat, 22 Aug 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:jwodder.github.io,2020-08-22:/kbits/posts/pypkg-mistakes/</guid><category>Programming</category><category>Python</category><category>Python packaging</category><category>setuptools</category><category>best practices</category><category>advice</category></item><item><title>Setting Default Option Values from Config Files with Click</title><link>https://jwodder.github.io/kbits/posts/click-config/</link><description>&lt;p class="first last"&gt;How to set up a Click program to read default option values from a config
file&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John T. Wodder II</dc:creator><pubDate>Fri, 17 Jul 2020 00:00:00 -0400</pubDate><guid isPermaLink="false">tag:jwodder.github.io,2020-07-17:/kbits/posts/click-config/</guid><category>Programming</category><category>Python</category><category>Click</category><category>configuration file</category><category>command-line parsing</category></item></channel></rss>